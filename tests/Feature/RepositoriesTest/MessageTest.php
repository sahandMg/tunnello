<?php

namespace Tests\Feature;

use App\Models\Group;
use App\Models\Message;
use App\Models\User;
use App\Repositories\DB\GroupDB;
use App\Repositories\DB\MessageDB;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class MessageTest extends TestCase
{
    use WithFaker;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');

    }

    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function createNewMessage()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $this->actingAs($recipient);
        $data = [
            'body' => $this->faker->sentence,
            'sender_id' => $sender->id,
            'recipient_id' => $recipient->id
        ];
        MessageDB::createNewMessage($data['body'], $data['recipient_id'] , $data['sender_id']);
        $this->assertEquals(1, Message::get()->count());
    }

    /**
     * @test
     */
    public function createNewGroupMessage()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $this->actingAs($recipient);
        $group = Group::query()->create([
            'name' => 'Teddy',
            'owner_id' => $sender->id
        ]);
        $data = [
            'body' => $this->faker->sentence,
            'sender_id' => $sender->id,
            'group_id' => $group->id
        ];
        MessageDB::createNewGroupMessage($data['body'], $data['group_id'] , $data['sender_id']);
        $this->assertEquals(1, Message::get()->count());
    }

    /**
     * @test
     */

    public function getAuthUserSoloMessages()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $this->actingAs($recipient);
        MessageDB::createNewMessage('Salammm',$recipient->id, $sender->id);
        MessageDB::createNewMessage('Salammm',$recipient->id, $sender->id);
        MessageDB::createNewMessage('Salammm',$recipient->id, $sender->id);
        $this->assertEquals(3, MessageDB::getAuthUserSoloMessages()->count());
    }

    /**
     * @test
     */

    public function getAuthUserGroupMessages()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $this->actingAs($recipient);
        $group = GroupDB::createGroup('teddy');
        $this->assertNotNull($group);
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id]);
        MessageDB::createNewGroupMessage('Salammm', $group->id, $sender->id);
        MessageDB::createNewGroupMessage('Salammm', $group->id, $sender->id);
        MessageDB::createNewGroupMessage('Salammm', $group->id, $sender->id);
        $msgs =  MessageDB::getAuthUserGroupMessages();
        $this->assertEquals(3, $msgs[0]->count());
    }

}
