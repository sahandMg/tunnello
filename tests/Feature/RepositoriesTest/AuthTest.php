<?php

namespace Tests\Feature;

use App\Models\User;
use App\Repositories\DB\AuthDB;
use App\Services\DataFormatter;
use Illuminate\Foundation\Testing\Concerns\InteractsWithSession;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Tests\TestCase;

class AuthTest extends TestCase
{
    use WithFaker, InteractsWithSession;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
    }

    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function RegisterNewUser()
    {
        $data = [
//            'fullname' => $this->faker->name,
            'username' => $this->faker->name,
            'phone'    =>  randomPhone(),
            'password' => '32132332321123',
        ];
        AuthDB::RegisterNewUser($data);
        $this->assertEquals(1, User::get()->count());
    }

    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function LoginUser()
    {
        $reg_data = [
            'fullname' => $this->faker->name,
            'username' => $this->faker->name,
            'phone'    =>  randomPhone(),
            'password' => '32132332321123',
        ];
        $login_data = [
            'username' => $reg_data['username'],
            'phone' => $reg_data['phone'],
            'password' => '32132332321123',
        ];
        AuthDB::RegisterNewUser($reg_data);
        $this->assertEquals(1, User::get()->count());
        $state = AuthDB::LoginUser($login_data);
        $this->assertTrue(is_string($state));

    }

    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function LogoutUser()
    {
        $reg_data = [
            'fullname' => $this->faker->name,
            'username' => $this->faker->name,
            'phone'    =>  randomPhone(),
            'password' => '32132332321123',
        ];
        $login_data = [
            'username' => $reg_data['username'],
            'phone' => $reg_data['phone'],
            'password' => '32132332321123',
        ];
        AuthDB::RegisterNewUser($reg_data);
        $this->assertEquals(1, User::get()->count());
        $state = AuthDB::LoginUser($login_data);
        AuthDB::LogoutUser();
        $this->assertTrue(!auth()->check());

    }
}
