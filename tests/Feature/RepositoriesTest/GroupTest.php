<?php

namespace Tests\Feature;

use App\Exceptions\ChannelNotFoundException;
use App\Models\Group;
use App\Models\User;
use App\Repositories\DB\ChannelDB;
use App\Repositories\DB\GroupDB;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class GroupTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
    }
    /**
     * @test
     */
    public function createGroup()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $group = GroupDB::createGroup('teddy');
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id]);
        $this->assertEquals(1, Group::get()->count());
        $this->assertEquals(2, $group->users->count());
    }

    /**
     * @test
     */
    public function getGroupById()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $group = GroupDB::createGroup('teddy');
        $group2 = GroupDB::createGroup('teddy2');
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id]);
        $g = GroupDB::getGroupById(1);
        $this->assertNotNull($g);
        $g2 = GroupDB::getGroupById(3);
        $this->assertNull($g2);
    }

    /**
     * @test
     */
    public function getGroupOwner()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $group = GroupDB::createGroup('teddy');
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id]);
        $owner = GroupDB::getGroupOwner($group);
        $this->assertEquals($sender->id, $owner->id);
    }

    /**
     * @test
     */

    public function updateGroupChannel()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        GroupDB::createGroup('teddy');
        $group = GroupDB::getGroupById(1);
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id]);
        ChannelDB::createNewChannel($sender->id, 'teddy', 'group');
//        $this->expectException(ChannelNotFoundException::class);
        $this->assertEquals(1, ChannelDB::getAuthUserGroupChannels()->count());
        $c = ChannelDB::getChannelByName('teddy');
        GroupDB::updateGroupChannel($group, $c->getOrThrow(new ChannelNotFoundException()));
        $this->assertEquals($c->getOrThrow(new ChannelNotFoundException())->id, $group->channel_id);
    }
}
