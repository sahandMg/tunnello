<?php

namespace Tests\Feature;

use App\Models\User;
use App\Repositories\DB\GroupDB;
use App\Repositories\DB\UserDB;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class UserTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
    }
    /**
     * @test
     */
    public function getAllUsersExceptAuthOne()
    {
        User::factory(3)->create();
        $sender = User::find(1);
        $this->actingAs($sender);
        $this->assertEquals(2, UserDB::getAllUsersExceptAuthOne()->count());
    }

    /**
     * @test
     */

    public function getAuthUserGroups()
    {
        User::factory(3)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $mid = User::find(3);
        $this->actingAs($sender);
        $group = GroupDB::createGroup('teddy');
        $group2 = GroupDB::createGroup('teddy2');
        GroupDB::attachUserToAGroup($group, [$sender->id, $recipient->id, $mid->id]);
        GroupDB::attachUserToAGroup($group2, [$sender->id, $recipient->id, $mid->id]);
        $this->assertEquals(2, UserDB::getAuthUserGroups()->count());
        $groups = UserDB::getAuthUserGroups();
        $this->assertArrayHasKey('name', $groups[0]->toArray());
        $this->assertArrayHasKey('id', $groups[0]->toArray());
    }

    /**
     * @test
     */

    public function getUserById()
    {
        User::factory(3)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $mid = User::find(3);
        $this->actingAs($sender);
        $this->assertEquals($recipient->id, UserDB::getUserById($recipient->id)->id);
    }

    /**
     * @test
     */

    public function attachFriend()
    {
        User::factory(3)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $mid = User::find(3);
        $this->actingAs($sender);
        UserDB::attachFriend($recipient->id);
        $this->assertEquals(1, $sender->friends->count());
        $this->assertEquals(true, UserDB::checkIfFriendExists(2));
        $this->assertEquals(false, UserDB::checkIfFriendExists(3));
    }
}
