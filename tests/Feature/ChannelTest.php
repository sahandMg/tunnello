<?php

namespace Tests\Feature;

use App\Models\SocketChannel;
use App\Models\User;
use App\Repositories\DB\ChannelDB;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class ChannelTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
    }

    /**
     * @test
     */
    public function user_can_create_channel()
    {
        User::factory(2)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $this->actingAs($sender);
        $this->actingAs($recipient);
        $channel_name = channelId($sender->id, $recipient->id);
        ChannelDB::createNewChannel($sender->id, $channel_name);
        $this->assertEquals(encode($sender->id.$recipient->id), $channel_name);
        $this->assertEquals(1, SocketChannel::get()->count());
    }

    /**
     * @test
     */

    public function get_user_channels_test()
    {
        User::factory(3)->create();
        $sender = User::find(1);
        $recipient = User::find(2);
        $middleMan = User::find(3);
        $this->actingAs($sender);
        $channel_name = channelId($sender->id, $recipient->id);
        ChannelDB::createNewChannel($sender->id, $channel_name);
        $group_channel_name = groupChannelId([$middleMan->id, $sender->id, $recipient->id]);
        ChannelDB::createNewChannel($sender->id, $group_channel_name, 'group');
        $this->assertEquals(encode([1,2,3]), $group_channel_name);
        $this->assertEquals(1, ChannelDB::getAuthUserSoloChannels()->count());
        $this->assertEquals(1, ChannelDB::getAuthUserGroupChannels()->count());
    }
}
