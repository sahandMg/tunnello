<?php

namespace Tests\Feature;

use App\Models\Group;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class GroupRoutesTest extends TestCase
{
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
        $data = [
            'fullname' => $this->faker->name,
            'username' => $this->faker->name,
            'email' => $this->faker->email,
            'password' => '32132332321123',
            'password_confirmation' => '32132332321123',
            '_token' => csrf_token()
        ];
        $this->post('/register', $data);
    }

    /**
     * @test
     */
    public function create_group_route()
    {
        User::factory(4)->create();
        $sender = User::find(1);
        $recp = User::find(2);
        $middle = User::find(3);
        $this->post(route('group.create'), ['name' => 'teddy', 'members' => [$sender->id, $recp->id, $middle->id]])
            ->assertOk();
    }

    /**
     * @test
     */
    public function create_group_route_with_error()
    {
        User::factory(4)->create();
        $sender = User::find(1);
        $recp = User::find(2);
        $middle = User::find(3);
        $this->post(route('group.create'), ['name' => 'teddy', 'members' => [$sender->id, $recp->id, $middle->id]])
            ->assertOk();
        $this->post(route('group.create'), ['name' => 'teddy', 'members' => [$sender->id, $recp->id, $middle->id]])
            ->assertOk();
        $this->post(route('group.create'), ['name' => 'teddy', 'members' => [$sender->id, $recp->id, $middle->id]])
            ->assertOk();
        $this->assertEquals(1, Group::get()->count());
    }
}
